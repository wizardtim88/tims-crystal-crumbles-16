import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

const geminiApiKey = Deno.env.get('GEMINI_API_KEY');
const supabaseUrl = Deno.env.get('SUPABASE_URL');
const supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY');

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    if (!geminiApiKey) {
      throw new Error('Gemini API key not configured');
    }

    const { reading, type, question } = await req.json();

    if (!reading || !type) {
      throw new Error('Reading content and type are required');
    }

    console.log(`Processing ${type} reading for book recommendations...`);

    // Initialize Supabase client with service key
    const supabase = createClient(supabaseUrl!, supabaseServiceKey!);

    // Fetch books from database
    const { data: books, error: booksError } = await supabase
      .from('book_io')
      .select('*')
      .limit(50); // Limit to reduce AI processing time

    if (booksError) {
      console.error('Error fetching books:', booksError);
      throw new Error('Failed to fetch books from database');
    }

    if (!books || books.length === 0) {
      throw new Error('No books found in database');
    }

    console.log(`Found ${books.length} books to analyze`);

    // Prepare the context for Gemini
    const contextPrompt = `You are The Wizard Tim, a mystical book recommendation expert. Based on the ${type} reading provided, recommend 3 books from the available collection that would be most beneficial for this person.

${type === 'fortune' ? 'Fortune Reading' : type === 'tarot' ? 'Tarot Card Reading' : 'Horoscope Reading'}: "${reading}"
${question ? `User's Question: "${question}"` : ''}

Available Books (JSON format):
${JSON.stringify(books.map(book => ({
  id: book.ID,
  title: book.Title,
  subtitle: book.Subtitle,
  creators: book.Creators,
  description: book['short_description-0'],
  url: book.URL
})), null, 2)}

Instructions:
1. Analyze the themes, emotions, and guidance in the reading
2. Select 3 books that would help the person based on their reading
3. Provide a mystical but practical explanation for each recommendation
4. Format your response as valid JSON with this structure:
{
  "recommendations": [
    {
      "bookId": number,
      "title": "Book Title",
      "reason": "Why Tim recommends this book based on the reading (keep it mystical but practical, 2-3 sentences max)"
    }
  ]
}

Keep Tim's personality: wise but slightly grumpy, mystical but practical. Each reason should be 2-3 sentences maximum.`;

    // Call Gemini API
    const geminiResponse = await fetch(
      `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${geminiApiKey}`,
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          contents: [{
            parts: [{
              text: contextPrompt
            }]
          }],
          generationConfig: {
            temperature: 0.7,
            topK: 40,
            topP: 0.95,
            maxOutputTokens: 1024,
          },
        }),
      }
    );

    if (!geminiResponse.ok) {
      console.error('Gemini API error:', await geminiResponse.text());
      throw new Error('Failed to get book recommendations from Gemini');
    }

    const geminiData = await geminiResponse.json();
    console.log('Gemini response received');

    if (!geminiData.candidates || geminiData.candidates.length === 0) {
      throw new Error('No recommendations generated by Gemini');
    }

    const recommendationText = geminiData.candidates[0].content.parts[0].text;
    console.log('Raw Gemini response:', recommendationText);

    // Parse the JSON response from Gemini
    let recommendations;
    try {
      // Extract JSON from the response (in case there's extra text)
      const jsonMatch = recommendationText.match(/\{[\s\S]*\}/);
      if (!jsonMatch) {
        throw new Error('No JSON found in Gemini response');
      }
      recommendations = JSON.parse(jsonMatch[0]);
    } catch (parseError) {
      console.error('Failed to parse Gemini JSON:', parseError);
      throw new Error('Invalid recommendation format from AI');
    }

    // Validate and enrich recommendations with full book data
    const enrichedRecommendations = recommendations.recommendations
      .filter((rec: any) => rec.bookId && rec.title && rec.reason)
      .map((rec: any) => {
        const book = books.find(b => b.ID === rec.bookId);
        if (!book) return null;
        
        return {
          bookId: rec.bookId,
          title: book.Title,
          subtitle: book.Subtitle,
          creators: book.Creators,
          description: book['short_description-0'],
          url: book.URL,
          reason: rec.reason
        };
      })
      .filter(Boolean)
      .slice(0, 3); // Ensure max 3 recommendations

    if (enrichedRecommendations.length === 0) {
      throw new Error('No valid book matches found');
    }

    console.log(`Returning ${enrichedRecommendations.length} book recommendations`);

    return new Response(
      JSON.stringify({ 
        success: true, 
        recommendations: enrichedRecommendations 
      }),
      {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      }
    );

  } catch (error) {
    console.error('Error in recommend-books function:', error);
    return new Response(
      JSON.stringify({ 
        success: false, 
        error: error.message || 'Failed to generate book recommendations' 
      }),
      {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      }
    );
  }
});